import tkinter
from tkinter import *
from tkinter import ttk
import time

class Application(tkinter.Frame):
    def __init__(self, df, master=None):
        super().__init__(master)
        self.master = master
        master.title('Miniray GUI - (C) Ron Allum Deepsea Services Pty Ltd 2020')
        master.geometry('%dx%d+%d+%d' % (530, 400, 20, 50))

        self.font_type = 'Helvetica'
        self.font_size = 12
        # added a delay between label updates to improve loop sleep performance
        self.label_update_countdown_timer = time.time()
        self.label_update_timer = 0.4

        window1_root_tab = ttk.Notebook(master)
        #overview_tab = ttk.Frame(window1_root_tab)
        pitch_trim_tab = ttk.Frame(window1_root_tab)
        roll_trim_tab = ttk.Frame(window1_root_tab)
        heading_ctrl_tab = ttk.Frame(window1_root_tab)
        AHRS_tab = ttk.Frame(window1_root_tab)
        pressure_tab = ttk.Frame(window1_root_tab)
        enabled_tab = ttk.Frame(window1_root_tab)
        
        #window1_root_tab.add(overview_tab, text="  overview  ")
        window1_root_tab.add(pitch_trim_tab, text="  pitch trim  ")
        window1_root_tab.add(roll_trim_tab, text="  roll trim  ")
        window1_root_tab.add(heading_ctrl_tab, text="  Heading  ")
        window1_root_tab.add(AHRS_tab, text="  AHRS  ")
        window1_root_tab.add(pressure_tab, text="  pressure  ")
        window1_root_tab.add(enabled_tab, text="  enabled?  ")
        window1_root_tab.pack(expand=1, fill='both')
        self.pack()
        time.sleep(0.2)
        # scale and gui intput variables
        self.pitch_trim_intvar = IntVar()
        self.roll_trim_intvar = IntVar()
        self.heading_intvar = IntVar()

        self.gui_enabled_intvar = IntVar()
        self.gui_enabled_intvar.set(df['gui_enabled'])
        self.heading_controller_enable_intvar = IntVar()
        self.heading_controller_enable_intvar.set(df['heading_controller_enable'])
        self.roll_trim_enable_intvar = IntVar()
        self.roll_trim_enable_intvar.set(df['roll_trim_enable'])
        self.pitch_trim_enable_intvar = IntVar()
        self.pitch_trim_enable_intvar.set(df['pitch_trim_enable'])
        self.csv_logging_enable_intvar = IntVar()
        self.csv_logging_enable_intvar.set(df['csv_logging_enable'])
        self.drop_weight_control_enable_intvar = IntVar()
        self.drop_weight_control_enable_intvar.set(df['drop_weight_control_enable'])
        self.mission_script_enabled_intvar = IntVar()
        self.mission_script_enabled_intvar.set(df['mission_script_enabled'])
        self.live_graph_enabled_intvar = IntVar()
        self.live_graph_enabled_intvar.set(df['live_graph_csv_enable'])

#--------------------INPUTS------------------------------------
        # Pitch trim_system inputs
        self.P_trim_setpoint = tkinter.Scale(pitch_trim_tab, font=(self.font_type,self.font_size), from_=-20, to=20, variable=self.pitch_trim_intvar, orient=HORIZONTAL, label="Pitch angle setpoint",length=500, width=15)
        self.P_trim_setpoint.grid(row=4,column=4)
        self.P_trim_setpoint.set(0)

        # pitch tab GUI label displays
        self.P_trim_current_position = Label(pitch_trim_tab, font=(self.font_type,self.font_size))
        self.P_trim_current_position.grid(row=5,column=4)
        self.P_trim_setpoint_label = Label(pitch_trim_tab, font=(self.font_type,self.font_size))
        self.P_trim_setpoint_label.grid(row=6,column=4)
        self.P_trim_AHRS_angle_label = Label(pitch_trim_tab, font=(self.font_type,self.font_size))
        self.P_trim_AHRS_angle_label.grid(row=7,column=4)
        self.pitch_trim_unused_label = Label(pitch_trim_tab, font=(self.font_type,self.font_size))
        self.pitch_trim_unused_label.grid(row=8,column=4)
        self.pitch_motor_enabled_label = Label(pitch_trim_tab, font=(self.font_type,self.font_size))
        self.pitch_motor_enabled_label.grid(row=9,column=4)
        self.P_trim_gui_enabled_label = Label(pitch_trim_tab, font=(self.font_type,self.font_size))
        self.P_trim_gui_enabled_label.grid(row=10,column=4)
        self.pitch_trim_Pterm_label = Label(pitch_trim_tab, font=(self.font_type,self.font_size))
        self.pitch_trim_Pterm_label.grid(row=11,column=4)
        self.pitch_trim_Iterm_label = Label(pitch_trim_tab, font=(self.font_type,self.font_size))
        self.pitch_trim_Iterm_label.grid(row=12,column=4)
        self.pitch_trim_Dterm_label = Label(pitch_trim_tab, font=(self.font_type,self.font_size))
        self.pitch_trim_Dterm_label.grid(row=13,column=4)
        self.pitch_trim_spacer_label = Label(pitch_trim_tab, font=(self.font_type,self.font_size))
        self.pitch_trim_spacer_label.grid(row=14,column=4)
        self.pitch_trim_loop_speed_label = Label(pitch_trim_tab, font=(self.font_type,self.font_size))
        self.pitch_trim_loop_speed_label.grid(row=15,column=4)

        # roll trim_system inputs
        self.R_trim_setpoint = tkinter.Scale(roll_trim_tab, font=(self.font_type,self.font_size), from_=-20, to=20, variable=self.roll_trim_intvar, orient=HORIZONTAL, label="roll angle setpoint",length=500, width=15)
        self.R_trim_setpoint.grid(row=4,column=4)
        self.R_trim_setpoint.set(0)
        # roll tab GUI label displays
        self.R_trim_current_position = Label(roll_trim_tab, font=(self.font_type,self.font_size))
        self.R_trim_current_position.grid(row=5,column=4)
        self.R_trim_setpoint_label = Label(roll_trim_tab, font=(self.font_type,self.font_size))
        self.R_trim_setpoint_label.grid(row=6,column=4)
        self.R_trim_AHRS_angle_label = Label(roll_trim_tab, font=(self.font_type,self.font_size))
        self.R_trim_AHRS_angle_label.grid(row=7,column=4)
        self.roll_trim_unused_label = Label(roll_trim_tab, font=(self.font_type,self.font_size))
        self.roll_trim_unused_label.grid(row=8,column=4)
        self.roll_motor_enabled_label = Label(roll_trim_tab, font=(self.font_type,self.font_size))
        self.roll_motor_enabled_label.grid(row=9,column=4)
        self.R_trim_gui_enabled_label = Label(roll_trim_tab, font=(self.font_type,self.font_size))
        self.R_trim_gui_enabled_label.grid(row=10,column=4)
        self.roll_trim_Pterm_label = Label(roll_trim_tab, font=(self.font_type,self.font_size))
        self.roll_trim_Pterm_label.grid(row=11,column=4)
        self.roll_trim_Iterm_label = Label(roll_trim_tab, font=(self.font_type,self.font_size))
        self.roll_trim_Iterm_label.grid(row=12,column=4)
        self.roll_trim_Dterm_label = Label(roll_trim_tab, font=(self.font_type,self.font_size))
        self.roll_trim_Dterm_label.grid(row=13,column=4)
        self.roll_trim_spacer_label = Label(roll_trim_tab, font=(self.font_type,self.font_size))
        self.roll_trim_spacer_label.grid(row=14,column=4)
        self.roll_trim_loop_speed_label = Label(roll_trim_tab, font=(self.font_type,self.font_size))
        self.roll_trim_loop_speed_label.grid(row=15,column=4)
    
    # heading setpoint inputs
        self.heading_setpoint = tkinter.Scale(heading_ctrl_tab, font=(self.font_type,self.font_size), from_=0, to=359, variable=self.heading_intvar, orient=HORIZONTAL, label="heading angle setpoint",length=500, width=15)
        self.heading_setpoint.grid(row=0,column=0)
        self.heading_setpoint.set(0)
    # heading tab GUI label displays
        self.heading_setpoint_label = Label(heading_ctrl_tab, font=(self.font_type,self.font_size))
        self.heading_setpoint_label.grid(row=1,column=0)
        self.current_heading_label = Label(heading_ctrl_tab, font=(self.font_type,self.font_size))
        self.current_heading_label.grid(row=2,column=0)
        self.roll_input_label = Label(heading_ctrl_tab, font=(self.font_type,self.font_size))
        self.roll_input_label.grid(row=3,column=0)
        self.heading_tab_spacer1_label = Label(heading_ctrl_tab, font=(self.font_type,self.font_size))
        self.heading_tab_spacer1_label.grid(row=4,column=0)
        self.heading_control_enabled_label = Label(heading_ctrl_tab, font=(self.font_type,self.font_size))
        self.heading_control_enabled_label.grid(row=5,column=0)
        self.heading_error_label = Label(heading_ctrl_tab, font=(self.font_type,self.font_size))
        self.heading_error_label.grid(row=6,column=0)
        self.heading_output_label = Label(heading_ctrl_tab, font=(self.font_type,self.font_size))
        self.heading_output_label.grid(row=7,column=0)
        self.heading_Pterm_label = Label(heading_ctrl_tab, font=(self.font_type,self.font_size))
        self.heading_Pterm_label.grid(row=8,column=0)
        self.heading_Iterm_label = Label(heading_ctrl_tab, font=(self.font_type,self.font_size))
        self.heading_Iterm_label.grid(row=9,column=0)
        self.heading_Dterm_label = Label(heading_ctrl_tab, font=(self.font_type,self.font_size))
        self.heading_Dterm_label.grid(row=10,column=0)

    # AHRS tab gui label displays
        self.AHRS_roll_label = Label(AHRS_tab, font=(self.font_type,self.font_size))
        self.AHRS_roll_label.grid(row=0,column=0)
        self.AHRS_pitch_label = Label(AHRS_tab, font=(self.font_type,self.font_size))
        self.AHRS_pitch_label.grid(row=1,column=0)
        self.AHRS_heading_label = Label(AHRS_tab, font=(self.font_type,self.font_size))
        self.AHRS_heading_label.grid(row=2,column=0)
        self.AHRS_spacer_label = Label(AHRS_tab, font=(self.font_type,self.font_size))
        self.AHRS_spacer_label.grid(row=3,column=0)
        self.AHRS_roll_rate_label = Label(AHRS_tab, font=(self.font_type,self.font_size))
        self.AHRS_roll_rate_label.grid(row=4,column=0)
        self.AHRS_pitch_rate_label = Label(AHRS_tab, font=(self.font_type,self.font_size))
        self.AHRS_pitch_rate_label.grid(row=5,column=0)
        self.AHRS_heading_rate_label = Label(AHRS_tab, font=(self.font_type,self.font_size))
        self.AHRS_heading_rate_label.grid(row=6,column=0)

    # pressure tab GUI label displays
        self.current_pressure = Label(pressure_tab, font=(self.font_type,self.font_size))
        self.current_pressure.grid(row=0,column=0)
        self.current_MSL_depth = Label(pressure_tab, font=(self.font_type,self.font_size))
        self.current_MSL_depth.grid(row=1,column=0)
        self.current_local_depth = Label(pressure_tab, font=(self.font_type,self.font_size))
        self.current_local_depth.grid(row=2,column=0)
        self.pressure_spacer_label = Label(pressure_tab, font=(self.font_type,self.font_size))
        self.pressure_spacer_label.grid(row=3,column=0)
        self.pressure_sensor_temp_label = Label(pressure_tab, font=(self.font_type,self.font_size))
        self.pressure_sensor_temp_label.grid(row=4,column=0)

    # enabled tab gui label displays
        self.heading_controller_enable_label = Label(enabled_tab, font=(self.font_type,self.font_size))
        self.heading_controller_enable_label.grid(row=0,column=0)
        self.heading_ctrl_checkbutton = Checkbutton(enabled_tab, text = "heading ctrl enable", variable=self.heading_controller_enable_intvar)
        self.heading_ctrl_checkbutton.grid(row=0,column=1)
        self.roll_trim_enable_label = Label(enabled_tab, font=(self.font_type,self.font_size))
        self.roll_trim_enable_label.grid(row=1,column=0)
        self.roll_trim_checkbutton = Checkbutton(enabled_tab, text = "roll trim enable", variable=self.roll_trim_enable_intvar)
        self.roll_trim_checkbutton.grid(row=1,column=1)
        self.roll_trim_checkbutton.configure(state='disable')
        self.pitch_trim_enable_label = Label(enabled_tab, font=(self.font_type,self.font_size))
        self.pitch_trim_enable_label.grid(row=2,column=0)
        self.pitch_trim_checkbutton = Checkbutton(enabled_tab, text = "pitch trim enable", variable=self.pitch_trim_enable_intvar)
        self.pitch_trim_checkbutton.grid(row=2,column=1)
        self.pitch_trim_checkbutton.configure(state='disable')
        self.csv_logging_enable_label = Label(enabled_tab, font=(self.font_type,self.font_size))
        self.csv_logging_enable_label.grid(row=3,column=0)
        self.csv_logging_enable_checkbutton = Checkbutton(enabled_tab, text = "csv log enable", variable=self.csv_logging_enable_intvar)
        self.csv_logging_enable_checkbutton.grid(row=3,column=1)
        self.csv_logging_enable_checkbutton.configure(state='disable')
        self.drop_weight_control_enable_label = Label(enabled_tab, font=(self.font_type,self.font_size))
        self.drop_weight_control_enable_label.grid(row=4,column=0)
        self.drop_weight_control_enable_checkbutton = Checkbutton(enabled_tab, text = "drop weight enable", variable=self.drop_weight_control_enable_intvar)
        self.drop_weight_control_enable_checkbutton.grid(row=4,column=1)
        self.gui_enabled_label = Label(enabled_tab, font=(self.font_type,self.font_size))
        self.gui_enabled_label.grid(row=5,column=0)
        self.gui_enable_checkbutton = Checkbutton(enabled_tab, text = "gui enable", variable=self.gui_enabled_intvar)
        self.gui_enable_checkbutton.grid(row=5,column=1)
        self.mission_script_enabled_label = Label(enabled_tab, font=(self.font_type,self.font_size))
        self.mission_script_enabled_label.grid(row=6,column=0)
        self.mission_script_enabled_checkbutton = Checkbutton(enabled_tab, text = "mission enable", variable=self.mission_script_enabled_intvar)
        self.mission_script_enabled_checkbutton.grid(row=6,column=1)
        self.mission_script_type_label = Label(enabled_tab, font=(self.font_type,self.font_size))
        self.mission_script_type_label.grid(row=7,column=0)
        self.live_graph_enabled_label = Label(enabled_tab, font=(self.font_type,self.font_size))
        self.live_graph_enabled_label.grid(row=8,column=0)
        self.live_graph_enabled_checkbutton = Checkbutton(enabled_tab, text = "live graph enable", variable=self.live_graph_enabled_intvar)
        self.live_graph_enabled_checkbutton.grid(row=8,column=1)
        self.live_graph_enabled_checkbutton.configure(state='disable')

    def update_GUI_labels(self, df):
        self.master.update()
        if (time.time() - self.label_update_countdown_timer) > self.label_update_timer:
            if df['gui_enabled'] == 0:
                self.P_trim_setpoint.configure(state=tkinter.DISABLED, troughcolor='grey83', fg='grey70')
                self.R_trim_setpoint.configure(state=tkinter.DISABLED, troughcolor='grey83', fg='grey70')
                self.heading_setpoint.configure(state=tkinter.DISABLED, troughcolor='grey83', fg='grey70')
            elif df['heading_controller_enable'] == 1 and df['gui_enabled'] == 1:
                self.P_trim_setpoint.configure(state='active', troughcolor='grey70', fg='black')
                self.heading_setpoint.configure(state='active', troughcolor='grey70', fg='black')
                self.R_trim_setpoint.configure(state=tkinter.DISABLED, troughcolor='grey83', fg='grey70')
            elif df['heading_controller_enable'] == 0 and df['gui_enabled'] == 1:
                self.P_trim_setpoint.configure(state='active', troughcolor='grey70', fg='black')
                self.heading_setpoint.configure(state=tkinter.DISABLED, troughcolor='grey83', fg='grey70')
                self.R_trim_setpoint.configure(state='active', troughcolor='grey70', fg='black')
            else:
                self.P_trim_setpoint.configure(state='active', troughcolor='grey70', fg='black')
                self.R_trim_setpoint.configure(state='active', troughcolor='grey70', fg='black')
                self.heading_setpoint.configure(state='active', troughcolor='grey70', fg='black')

                

            self.P_trim_current_position.config(text="Current Position: " + str(df['pitch_trim_current_position']))
            self.P_trim_setpoint_label.config(text="Pitch angle setpoint: " + str(df['pitch_trim_setpoint']))
            self.P_trim_AHRS_angle_label.config(text="AHRS pitch angle: " + str(df['pitch_AHRS_deg']))
            self.pitch_trim_unused_label.config(text=" ")
            self.pitch_motor_enabled_label.config(text="pitch motor ENABLED?: " + str(df['pitch_trim_enable']))
            self.P_trim_gui_enabled_label.config(text="GUI ENABLED?: " + str(df['gui_enabled']))
            self.pitch_trim_Pterm_label.config(text="Pterm: " + str(df['pitch_trim_Pterm']))
            self.pitch_trim_Iterm_label.config(text="Iterm: " + str(df['pitch_trim_Iterm']))   
            self.pitch_trim_Dterm_label.config(text="DTerm: " + str(df['pitch_trim_Dterm']))
            self.pitch_trim_spacer_label.config(text="----------------------")
            self.pitch_trim_loop_speed_label.config(text="loop speed: " + str(df['loop_speed']))

            self.R_trim_current_position.config(text="Current Position: " + str(df['roll_trim_current_position']))
            self.R_trim_setpoint_label.config(text="Roll angle setpoint: " + str(df['roll_trim_setpoint']))
            self.R_trim_AHRS_angle_label.config(text="AHRS roll angle: " + str(df['roll_AHRS_deg']))
            self.roll_trim_unused_label.config(text=" ")
            self.roll_motor_enabled_label.config(text="roll motor ENABLED?: " + str(df['roll_trim_enable']))
            self.R_trim_gui_enabled_label.config(text="GUI ENABLED?: " + str(df['gui_enabled']))
            self.roll_trim_Pterm_label.config(text="Pterm: " + str(df['roll_trim_Pterm']))
            self.roll_trim_Iterm_label.config(text="Iterm: " + str(df['roll_trim_Iterm']))   
            self.roll_trim_Dterm_label.config(text="Dterm: " + str(df['roll_trim_Dterm']))
            self.roll_trim_spacer_label.config(text="----------------------")
            self.roll_trim_loop_speed_label.config(text="loop speed: " + str(df['loop_speed']))

            self.AHRS_roll_label.config(text="AHRS roll angle: " + str(df['roll_AHRS_deg']))
            self.AHRS_pitch_label.config(text="AHRS pitch angle: " + str(df['pitch_AHRS_deg']))
            self.AHRS_heading_label.config(text="AHRS heading angle: " + str(df['heading_AHRS_deg']))
            self.AHRS_spacer_label.config(text="----------------------")
            self.AHRS_roll_rate_label.config(text="AHRS roll rate angle: " + str(df['roll_rate_AHRS_deg']))
            self.AHRS_pitch_rate_label.config(text="AHRS pitch rate angle: " + str(df['pitch_rate_AHRS_deg']))
            self.AHRS_heading_rate_label.config(text="AHRS heading rate angle: " + str(df['heading_rate_AHRS_deg']))

            self.heading_setpoint_label.config(text="heading setpoint: " + str(df['heading_setpoint']))
            self.current_heading_label.config(text="current heading: " + str(df['heading_AHRS_deg']))
            self.roll_input_label.config(text="roll setpoint: " + str(df['roll_trim_setpoint']))
            self.heading_tab_spacer1_label.config(text="----------------------")
            self.heading_control_enabled_label.config(text="heading ctrl ENABLED?: " + str(df['heading_controller_enable']))
            self.heading_error_label.config(text="heading error: " + str(df['heading_ctrl_error']))
            self.heading_output_label.config(text="heading output(roll SP): " + str(df['roll_trim_setpoint']))
            self.heading_Pterm_label.config(text="heading Pterm error: " + str(df['heading_ctrl_Pterm']))
            self.heading_Iterm_label.config(text="heading Iterm error: " + str(df['heading_ctrl_Iterm']))
            self.heading_Dterm_label.config(text="heading Dterm error: " + str(df['heading_ctrl_Dterm']))

            self.current_pressure.config(text="current pressure: " + str(df['pressure_mbar']))
            self.current_MSL_depth.config(text="calculated MSL depth: " + str(df['depth_m_MSL']))
            self.current_local_depth.config(text="calculated local depth: " + str(df['depth_m_local_pressure']))
            self.pressure_spacer_label.config(text="----------------------")
            self.pressure_sensor_temp_label.config(text="sensor temperature: " + str(df['water_temperature_c']))

            self.heading_controller_enable_label.config(text="heading ctrl?: " + str(df['heading_controller_enable']))
            self.roll_trim_enable_label.config(text="roll_motor?: " + str(df['roll_trim_enable']))
            self.pitch_trim_enable_label.config(text="pitch motor?: " + str(df['pitch_trim_enable']))
            self.csv_logging_enable_label.config(text="csv logging?: " + str(df['csv_logging_enable']))
            self.drop_weight_control_enable_label.config(text="drop weight?: " + str(df['drop_weight_control_enable']))
            self.gui_enabled_label.config(text="GUI setpoint?: " + str(df['gui_enabled']))
            self.mission_script_enabled_label.config(text="mission script?: " + str(df['mission_script_enabled']))
            self.mission_script_type_label.config(text="mission script type?: " + str(df['mission_script_type']))
            self.live_graph_enabled_label.config(text="live graph ?: " + str(df['live_graph_csv_enable']))

            self.label_update_countdown_timer = time.time()